import { chat } from '../llm/yandex-gpt.js';
import { tryLock, unlock } from './antiFlood.js';
import { SYSTEM_PROMPT } from './prompt.js';
import {
  MESSAGES,
  createMainKeyboard,
  createPdfKeyboard,
  createBackToMainKeyboard,
  createConfirmDataKeyboard,
  getCommandType,
} from './messages.js';
import { logger } from '../logger.js';
import { markUpdateStart, markUpdateOk, markUpdateErr, markLlm } from '../metrics.js';
import { getChatContext, addMessageToContext, clearChatContext } from '../storage/chatContext.js';
import { generatePdfReport } from '../pdf/pdfGenerator.js';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {string} response - –û—Ç–≤–µ—Ç –±–æ—Ç–∞
 * @returns {boolean} true –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
 */
function isDataConfirmationRequest(response) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const confirmationIndicators = [
    'üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö',
    '–í–æ–∑—Ä–∞—Å—Ç:',
    '–î–æ—Ö–æ–¥:',
    '–¶–µ–ª—å:',
    '–í–∑–Ω–æ—Å:',
    '–ù–∞—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã:',
  ];

  return confirmationIndicators.some((indicator) => response.includes(indicator));
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Ä–∞—Å—á—ë—Ç–æ–º –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
 * @param {string} response - –û—Ç–≤–µ—Ç –±–æ—Ç–∞
 * @returns {boolean} true –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞—Å—á—ë—Ç
 */
function isCalculationResponse(response) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–∞—Å—á—ë—Ç–∞
  const calculationIndicators = [
    'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:',
    '–¢—Ä–µ–±—É–µ–º—ã–π –≤–∑–Ω–æ—Å:',
    '–ü—Ä–æ–≥–Ω–æ–∑ –∫–∞–ø–∏—Ç–∞–ª–∞',
    '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞',
    '–†–∞–∑–±–∏–≤–∫–∞ –ø—Ä–∏—Ç–æ–∫–∞:',
    'üí∞ –õ–∏—á–Ω—ã–µ –≤–∑–Ω–æ—Å—ã:',
    'üèõÔ∏è –ì–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞:',
    'üí∏ –ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç:',
  ];

  return calculationIndicators.some((indicator) => response.includes(indicator));
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞—Å—á—ë—Ç–∞ —Å LLM
 */
/* eslint-disable no-irregular-whitespace */
async function startCalculationDialog(chatId, bot) {
  try {
    await bot.sendChatAction(chatId, 'typing');

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"
    const standardMessage = `üéØ –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ä–∞—Å—á—ë—Ç. –î–ª—è —ç—Ç–æ–≥–æ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:

1) –ü–æ–ª (–∂–µ–Ω/–º—É–∂) ‚Äî ?
2) –í–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç) ‚Äî ?
3) –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ ¬´–¥–æ¬†–ù–î–§–õ¬ª¬†(—Ä—É–±/–º–µ—Å)¬†‚Äî¬†?
4) –¶–µ–ª—å: –¥–æ–ø–≤—ã–ø–ª–∞—Ç–∞ (—Ä—É–±/–º–µ—Å) –∏–ª–∏ –∫–∞–ø–∏—Ç–∞–ª –∫¬†–Ω–∞—á–∞–ª—É¬†–≤—ã–ø–ª–∞—Ç¬†(—Ä—É–±)¬†‚Äî¬†?
5) –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –≤–∑–Ω–æ—Å –≤¬†–ü–î–°¬†(—Ä—É–±/–º–µ—Å)¬†‚Äî¬†?
6) –ö–æ–≥–¥–∞ –Ω–∞—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã: ¬´–ø–æ¬†–æ–±—â–µ–º—É¬†–ø—Ä–∞–≤–∏–ª—É¬ª –∏–ª–∏¬†¬´—á–µ—Ä–µ–∑¬†N¬†–ª–µ—Ç¬ª¬†‚Äî¬†?

–ü–æ –∂–µ–ª–∞–Ω–∏—é (–¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏):
7) –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è¬†–ü–î–°¬†(–µ—Å–ª–∏¬†–µ—Å—Ç—å),¬†—Ä—É–±¬†‚Äî¬†?
8) –°—Ç–∞–≤–∫–∞ –ù–î–§–õ: 13%¬†(–ø–æ¬†—É–º–æ–ª—á–∞–Ω–∏—é)¬†/¬†15%¬†‚Äî¬†?
9) –†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –ü–î–°: –¥–∞¬†(–ø–æ¬†—É–º–æ–ª—á–∞–Ω–∏—é)¬†/¬†–Ω–µ—Ç¬†‚Äî¬†?

–ñ–¥—É —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤!`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á—ë—Ç)
    addMessageToContext(chatId, 'user', '—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å');

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    addMessageToContext(chatId, 'assistant', standardMessage);

    markLlm(true);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const keyboard = createBackToMainKeyboard();
    await bot.sendMessage(chatId, standardMessage, {
      disable_web_page_preview: true,
      ...keyboard,
    });

    markUpdateOk();
    logger.info({ chatId }, 'calculation:started');
  } catch (e) {
    markLlm(false);
    markUpdateErr();
    logger.error({ chatId, err: e }, 'calculation:error');
    await bot.sendMessage(chatId, MESSAGES.LLM_ERROR);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á—ë—Ç
 */
async function processDataConfirmation(chatId, bot) {
  try {
    await bot.sendChatAction(chatId, 'typing');

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
    const context = getChatContext(chatId);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + –∫–æ–Ω—Ç–µ–∫—Å—Ç + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
    const messages = [
      { role: 'system', text: SYSTEM_PROMPT },
      ...context.map((msg) => ({ role: msg.role, text: msg.text })),
      { role: 'user', text: '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –¥–∞–Ω–Ω—ã–µ, –≤—ã–ø–æ–ª–Ω–∏ —Ä–∞—Å—á—ë—Ç —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏' },
    ];

    const reply = await chat(messages);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    addMessageToContext(
      chatId,
      'user',
      '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –¥–∞–Ω–Ω—ã–µ, –≤—ã–ø–æ–ª–Ω–∏ —Ä–∞—Å—á—ë—Ç —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏'
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    addMessageToContext(chatId, 'assistant', reply);

    markLlm(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —Ä–∞—Å—á—ë—Ç–æ–º
    const isCalculation = isCalculationResponse(reply);
    logger.info({ chatId, isCalculation }, 'confirmation:response:type');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π PDF —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤
    if (isCalculation) {
      const keyboard = createPdfKeyboard();
      await bot.sendMessage(chatId, reply, {
        disable_web_page_preview: true,
        ...keyboard,
      });
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
      const keyboard = createBackToMainKeyboard();
      await bot.sendMessage(chatId, reply, {
        disable_web_page_preview: true,
        ...keyboard,
      });
    }

    markUpdateOk();
    logger.info({ chatId }, 'confirmation:processed');
  } catch (e) {
    markLlm(false);
    markUpdateErr();
    logger.error({ chatId, err: e }, 'confirmation:error');
    await bot.sendMessage(chatId, MESSAGES.LLM_ERROR);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF-–æ—Ç—á—ë—Ç
 */
async function generateAndSendPdf(chatId, bot) {
  try {
    logger.info({ chatId }, 'pdf:start');
    await bot.sendChatAction(chatId, 'typing');

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const context = getChatContext(chatId);
    logger.info({ chatId, contextLength: context.length }, 'pdf:context:check');

    const lastBotMessage = context.filter((msg) => msg.role === 'assistant').pop();
    logger.info(
      { chatId, hasLastMessage: !!lastBotMessage, messageLength: lastBotMessage?.text?.length },
      'pdf:lastMessage:check'
    );

    if (!lastBotMessage) {
      logger.warn({ chatId, contextLength: context.length }, 'pdf:noData');
      await bot.sendMessage(chatId, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á—ë—Ç.');
      return;
    }

    if (!lastBotMessage.text || lastBotMessage.text.trim().length === 0) {
      logger.warn({ chatId }, 'pdf:emptyMessage');
      await bot.sendMessage(chatId, '–û—Ç–≤–µ—Ç –±–æ—Ç–∞ –ø—É—Å—Ç. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞.');
      return;
    }

    logger.info(
      { chatId, messagePreview: lastBotMessage.text.substring(0, 100) },
      'pdf:generating'
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    const pdfBuffer = await generatePdfReport(lastBotMessage.text, {
      reportDate: new Date().toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      }),
      filename: `pension-report-${chatId}-${Date.now()}`,
    });

    logger.info({ chatId, pdfSize: pdfBuffer.length }, 'pdf:generated');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä PDF
    if (!pdfBuffer || pdfBuffer.length === 0) {
      logger.error({ chatId }, 'pdf:emptyBuffer');
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PDF –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    await bot.sendDocument(chatId, pdfBuffer, {
      filename: `pension-report-${Date.now()}.pdf`,
      caption: 'üìÑ –í–∞—à –æ—Ç—á—ë—Ç –ø–æ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º –≥–æ—Ç–æ–≤!',
    });

    logger.info({ chatId }, 'pdf:sent');
  } catch (e) {
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    logger.error(
      {
        chatId,
        err: e.message,
        stack: e.stack,
        errorName: e.name,
        errorCode: e.code,
      },
      'pdf:error'
    );

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–æ—Ç—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';

    if (e.message.includes('–±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')) {
      errorMessage =
        '‚ùå –û—à–∏–±–∫–∞: –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    } else if (e.message.includes('–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è') || e.message.includes('timeout')) {
      errorMessage = '‚è±Ô∏è –û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    } else if (e.message.includes('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')) {
      errorMessage = 'üìù –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF.';
    } else if (e.message.includes('–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')) {
      errorMessage = 'üìÑ –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF.';
    } else if (e.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã')) {
      errorMessage = 'üîß –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF.';
    } else if (e.message.includes('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')) {
      errorMessage = 'üîê –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF.';
    } else if (e.message.includes('PDF generation failed')) {
      errorMessage = 'üìÑ –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    } else if (e.message.includes('ENOENT') || e.message.includes('ENOTFOUND')) {
      errorMessage = 'üîß –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    } else if (e.message.includes('EACCES') || e.message.includes('EPERM')) {
      errorMessage = 'üîê –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    }

    await bot.sendMessage(chatId, errorMessage);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleCommand(chatId, command, bot) {
  switch (command) {
    case 'start': {
      clearChatContext(chatId);
      const keyboard = createMainKeyboard();
      await bot.sendMessage(chatId, MESSAGES.WELCOME, keyboard);
      break;
    }
    case 'clear':
      clearChatContext(chatId);
      await bot.sendMessage(chatId, MESSAGES.CLEAR_CONTEXT);
      break;
    case 'calculate':
      // –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å LLM –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
      await startCalculationDialog(chatId, bot);
      break;
    case 'info':
      await bot.sendMessage(chatId, MESSAGES.INFO_ABOUT_PDS);
      break;
    default:
      await bot.sendMessage(chatId, MESSAGES.UNKNOWN_COMMAND);
  }
}

export function attachBotHandlers(bot) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /clear
  bot.onText(/^\/(start|clear)\b/, async (msg) => {
    const chatId = msg.chat.id;
    const command = msg.text.split(' ')[0].substring(1); // —É–±–∏—Ä–∞–µ–º /
    logger.info({ chatId, command }, 'cmd:slash');
    await handleCommand(chatId, command, bot);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
  bot.onText(/^(—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å|—á—Ç–æ —Ç–∞–∫–æ–µ –ø–¥—Å\?*)$/i, async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text.toLowerCase().trim();
    const command = getCommandType(text) || 'unknown';
    logger.info({ chatId, command }, 'cmd:text');

    // –î–ª—è –∫–æ–º–∞–Ω–¥—ã calculate —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
    if (command === 'calculate') {
      await startCalculationDialog(chatId, bot);
    } else {
      await handleCommand(chatId, command, bot);
    }
  });

  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = (msg.text ?? '').trim();
    if (!text || text.startsWith('/')) return;

    markUpdateStart();
    logger.info({ chatId, text }, 'msg:in');

    if (!tryLock(chatId)) {
      await bot.sendMessage(chatId, MESSAGES.WAIT_PREVIOUS);
      return;
    }

    try {
      await bot.sendChatAction(chatId, 'typing');

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      addMessageToContext(chatId, 'user', text);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
      const context = getChatContext(chatId);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + –∫–æ–Ω—Ç–µ–∫—Å—Ç)
      const messages = [
        { role: 'system', text: SYSTEM_PROMPT },
        ...context.map((msg) => ({ role: msg.role, text: msg.text })),
      ];

      const reply = await chat(messages);

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      addMessageToContext(chatId, 'assistant', reply);

      markLlm(true);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
      const isDataConfirmation = isDataConfirmationRequest(reply);
      const isCalculation = isCalculationResponse(reply);
      logger.info({ chatId, isDataConfirmation, isCalculation }, 'msg:response:type');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      if (isDataConfirmation) {
        // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const keyboard = createConfirmDataKeyboard();
        await bot.sendMessage(chatId, reply, {
          disable_web_page_preview: true,
          ...keyboard,
        });
      } else if (isCalculation) {
        // –î–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É PDF
        const keyboard = createPdfKeyboard();
        await bot.sendMessage(chatId, reply, {
          disable_web_page_preview: true,
          ...keyboard,
        });
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        const keyboard = createBackToMainKeyboard();
        await bot.sendMessage(chatId, reply, {
          disable_web_page_preview: true,
          ...keyboard,
        });
      }

      markUpdateOk();
      logger.info({ chatId }, 'msg:out:ok');
    } catch (e) {
      markLlm(false);
      markUpdateErr();
      logger.error({ chatId, err: e }, 'msg:out:error');
      await bot.sendMessage(chatId, MESSAGES.LLM_ERROR);
    } finally {
      unlock(chatId);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
  bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    logger.info({ chatId, data }, 'callback:received');

    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      if (data === MESSAGES.CALLBACK_DATA.DOWNLOAD_PDF) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF...' });
        await generateAndSendPdf(chatId, bot);
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (data === MESSAGES.CALLBACK_DATA.CONFIRM_DATA) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—á—ë—Ç...' });
        await processDataConfirmation(chatId, bot);
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (data === MESSAGES.CALLBACK_DATA.EDIT_DATA) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–µ.' });
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
        clearChatContext(chatId);
        await startCalculationDialog(chatId, bot);
        return;
      }

      // –ú–∞–ø–ø–∏–Ω–≥ callback_data –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
      const commandMap = {
        [MESSAGES.CALLBACK_DATA.CALCULATE]: 'calculate',
        [MESSAGES.CALLBACK_DATA.INFO]: 'info',
        [MESSAGES.CALLBACK_DATA.MAIN_MENU]: 'start',
      };

      const command = commandMap[data];
      if (command) {
        // –î–ª—è –∫–æ–º–∞–Ω–¥—ã calculate –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (command === 'calculate') {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç!' });
          await startCalculationDialog(chatId, bot);
        } else {
          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
          const responseText = MESSAGES.CALLBACK_RESPONSES[command.toUpperCase()] || 'OK';
          await bot.answerCallbackQuery(callbackQuery.id, { text: responseText });

          // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
          await handleCommand(chatId, command, bot);
        }
      }
    } catch (e) {
      logger.error({ chatId, err: e }, 'callback:error');
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: MESSAGES.CALLBACK_RESPONSES.ERROR,
      });
    }
  });

  bot.on('polling_error', (err) => logger.error({ err }, 'polling:error'));
}
