import { chat } from '../llm/yandex-gpt.js';
import { tryLock, unlock } from './antiFlood.js';
import { SYSTEM_PROMPT } from './prompt.js';
import {
  MESSAGES,
  createMainKeyboard,
  createPdfKeyboard,
  createBackToMainKeyboard,
  getCommandType,
} from './messages.js';
import { logger } from '../logger.js';
import { markUpdateStart, markUpdateOk, markUpdateErr, markLlm } from '../metrics.js';
import { getChatContext, addMessageToContext, clearChatContext } from '../storage/chatContext.js';
import { generatePdfReport } from '../pdf/pdfGenerator.js';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Ä–∞—Å—á—ë—Ç–æ–º –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
 * @param {string} response - –û—Ç–≤–µ—Ç –±–æ—Ç–∞
 * @returns {boolean} true –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞—Å—á—ë—Ç
 */
function isCalculationResponse(response) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–∞—Å—á—ë—Ç–∞
  const calculationIndicators = [
    'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:',
    '–¢—Ä–µ–±—É–µ–º—ã–π –≤–∑–Ω–æ—Å:',
    '–ü—Ä–æ–≥–Ω–æ–∑ –∫–∞–ø–∏—Ç–∞–ª–∞',
    '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞',
    '–†–∞–∑–±–∏–≤–∫–∞ –ø—Ä–∏—Ç–æ–∫–∞:',
    'üí∞ –õ–∏—á–Ω—ã–µ –≤–∑–Ω–æ—Å—ã:',
    'üèõÔ∏è –ì–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞:',
    'üí∏ –ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç:',
  ];

  return calculationIndicators.some((indicator) => response.includes(indicator));
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞—Å—á—ë—Ç–∞ —Å LLM
 */
async function startCalculationDialog(chatId, bot) {
  try {
    await bot.sendChatAction(chatId, 'typing');

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á—ë—Ç)
    addMessageToContext(chatId, 'user', '—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å');

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
    const context = getChatContext(chatId);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + –∫–æ–Ω—Ç–µ–∫—Å—Ç)
    const messages = [
      { role: 'system', text: SYSTEM_PROMPT },
      ...context.map((msg) => ({ role: msg.role, text: msg.text })),
    ];

    const reply = await chat(messages);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    addMessageToContext(chatId, 'assistant', reply);

    markLlm(true);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π PDF (–≤—Å–µ–≥–¥–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤)
    const keyboard = createPdfKeyboard();
    await bot.sendMessage(chatId, reply, {
      disable_web_page_preview: true,
      ...keyboard,
    });

    markUpdateOk();
    logger.info({ chatId }, 'calculation:started');
  } catch (e) {
    markLlm(false);
    markUpdateErr();
    logger.error({ chatId, err: e }, 'calculation:error');
    await bot.sendMessage(chatId, MESSAGES.LLM_ERROR);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF-–æ—Ç—á—ë—Ç
 */
async function generateAndSendPdf(chatId, bot) {
  try {
    await bot.sendChatAction(chatId, 'typing');

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const context = getChatContext(chatId);
    logger.info({ chatId, contextLength: context.length }, 'pdf:context:check');

    const lastBotMessage = context.filter((msg) => msg.role === 'assistant').pop();
    logger.info(
      { chatId, hasLastMessage: !!lastBotMessage, messageLength: lastBotMessage?.text?.length },
      'pdf:lastMessage:check'
    );

    if (!lastBotMessage) {
      logger.warn({ chatId, contextLength: context.length }, 'pdf:noData');
      await bot.sendMessage(chatId, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á—ë—Ç.');
      return;
    }

    logger.info(
      { chatId, messagePreview: lastBotMessage.text.substring(0, 100) },
      'pdf:generating'
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    const pdfBuffer = await generatePdfReport(lastBotMessage.text, {
      reportDate: new Date().toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      }),
      filename: `pension-report-${chatId}-${Date.now()}`,
    });

    logger.info({ chatId, pdfSize: pdfBuffer.length }, 'pdf:generated');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    await bot.sendDocument(chatId, pdfBuffer, {
      filename: `pension-report-${Date.now()}.pdf`,
      caption: 'üìÑ –í–∞—à –æ—Ç—á—ë—Ç –ø–æ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º –≥–æ—Ç–æ–≤!',
    });

    logger.info({ chatId }, 'pdf:sent');
  } catch (e) {
    logger.error({ chatId, err: e.message, stack: e.stack }, 'pdf:error');
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–æ—Ç—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleCommand(chatId, command, bot) {
  switch (command) {
    case 'start': {
      clearChatContext(chatId);
      const keyboard = createMainKeyboard();
      await bot.sendMessage(chatId, MESSAGES.WELCOME, keyboard);
      break;
    }
    case 'clear':
      clearChatContext(chatId);
      await bot.sendMessage(chatId, MESSAGES.CLEAR_CONTEXT);
      break;
    case 'calculate':
      // –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å LLM –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
      await startCalculationDialog(chatId, bot);
      break;
    case 'info':
      await bot.sendMessage(chatId, MESSAGES.INFO_ABOUT_PDS);
      break;
    default:
      await bot.sendMessage(chatId, MESSAGES.UNKNOWN_COMMAND);
  }
}

export function attachBotHandlers(bot) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /clear
  bot.onText(/^\/(start|clear)\b/, async (msg) => {
    const chatId = msg.chat.id;
    const command = msg.text.split(' ')[0].substring(1); // —É–±–∏—Ä–∞–µ–º /
    logger.info({ chatId, command }, 'cmd:slash');
    await handleCommand(chatId, command, bot);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
  bot.onText(/^(—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å|—á—Ç–æ —Ç–∞–∫–æ–µ –ø–¥—Å\?*)$/i, async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text.toLowerCase().trim();
    const command = getCommandType(text) || 'unknown';
    logger.info({ chatId, command }, 'cmd:text');

    // –î–ª—è –∫–æ–º–∞–Ω–¥—ã calculate —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
    if (command === 'calculate') {
      await startCalculationDialog(chatId, bot);
    } else {
      await handleCommand(chatId, command, bot);
    }
  });

  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = (msg.text ?? '').trim();
    if (!text || text.startsWith('/')) return;

    markUpdateStart();
    logger.info({ chatId, text }, 'msg:in');

    if (!tryLock(chatId)) {
      await bot.sendMessage(chatId, MESSAGES.WAIT_PREVIOUS);
      return;
    }

    try {
      await bot.sendChatAction(chatId, 'typing');

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      addMessageToContext(chatId, 'user', text);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
      const context = getChatContext(chatId);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + –∫–æ–Ω—Ç–µ–∫—Å—Ç)
      const messages = [
        { role: 'system', text: SYSTEM_PROMPT },
        ...context.map((msg) => ({ role: msg.role, text: msg.text })),
      ];

      const reply = await chat(messages);

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      addMessageToContext(chatId, 'assistant', reply);

      markLlm(true);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —Ä–∞—Å—á—ë—Ç–æ–º
      const isCalculation = isCalculationResponse(reply);
      logger.info({ chatId, isCalculation }, 'msg:response:type');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π PDF —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤
      if (isCalculation) {
        const keyboard = createPdfKeyboard();
        await bot.sendMessage(chatId, reply, {
          disable_web_page_preview: true,
          ...keyboard,
        });
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        const keyboard = createBackToMainKeyboard();
        await bot.sendMessage(chatId, reply, {
          disable_web_page_preview: true,
          ...keyboard,
        });
      }

      markUpdateOk();
      logger.info({ chatId }, 'msg:out:ok');
    } catch (e) {
      markLlm(false);
      markUpdateErr();
      logger.error({ chatId, err: e }, 'msg:out:error');
      await bot.sendMessage(chatId, MESSAGES.LLM_ERROR);
    } finally {
      unlock(chatId);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
  bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    logger.info({ chatId, data }, 'callback:received');

    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      if (data === MESSAGES.CALLBACK_DATA.DOWNLOAD_PDF) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF...' });
        await generateAndSendPdf(chatId, bot);
        return;
      }

      // –ú–∞–ø–ø–∏–Ω–≥ callback_data –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
      const commandMap = {
        [MESSAGES.CALLBACK_DATA.CALCULATE]: 'calculate',
        [MESSAGES.CALLBACK_DATA.INFO]: 'info',
        [MESSAGES.CALLBACK_DATA.MAIN_MENU]: 'start',
      };

      const command = commandMap[data];
      if (command) {
        // –î–ª—è –∫–æ–º–∞–Ω–¥—ã calculate –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (command === 'calculate') {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç!' });
          await startCalculationDialog(chatId, bot);
        } else {
          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
          const responseText = MESSAGES.CALLBACK_RESPONSES[command.toUpperCase()] || 'OK';
          await bot.answerCallbackQuery(callbackQuery.id, { text: responseText });

          // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
          await handleCommand(chatId, command, bot);
        }
      }
    } catch (e) {
      logger.error({ chatId, err: e }, 'callback:error');
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: MESSAGES.CALLBACK_RESPONSES.ERROR,
      });
    }
  });

  bot.on('polling_error', (err) => logger.error({ err }, 'polling:error'));
}
