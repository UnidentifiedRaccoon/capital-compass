/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –¥–∏–∞–≥—Ä–∞–º–º –¥–ª—è PDF-–æ—Ç—á—ë—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Chart.js –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
 */

/**
 * –°–æ–∑–¥–∞—ë—Ç HTML —Å Chart.js –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
 * @returns {string} HTML —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
 */
export function createChartsHtml(data) {
  const charts = [];

  // 1. –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
  if (data.accumulationData) {
    charts.push(createAccumulationChart(data.accumulationData));
  }

  // 2. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏—Ç–æ–∫–∞
  if (data.contributionBreakdown) {
    charts.push(createContributionPieChart(data.contributionBreakdown));
  }

  // 3. –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  if (data.scenariosComparison) {
    charts.push(createScenariosChart(data.scenariosComparison));
  }

  // 4. –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—ã–ø–ª–∞—Ç
  if (data.payoutForecast) {
    charts.push(createPayoutChart(data.payoutForecast));
  }

  return charts.join('\n');
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞
 */
function createAccumulationChart(data) {
  return `
    <div class="chart-container">
      <h3>üìà –î–∏–Ω–∞–º–∏–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞</h3>
      <canvas id="accumulationChart" width="400" height="200"></canvas>
      <script>
        const ctx = document.getElementById('accumulationChart').getContext('2d');
        new Chart(ctx, {
          type: 'line',
          data: {
            labels: ${JSON.stringify(data.years)},
            datasets: [{
              label: '–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª',
              data: ${JSON.stringify(data.values)},
              borderColor: '#2563eb',
              backgroundColor: 'rgba(37, 99, 235, 0.1)',
              borderWidth: 3,
              fill: true,
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    return '–ö–∞–ø–∏—Ç–∞–ª: ' + context.parsed.y.toLocaleString('ru-RU') + ' ‚ÇΩ';
                  }
                }
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  callback: function(value) {
                    return value.toLocaleString('ru-RU') + ' ‚ÇΩ';
                  }
                }
              }
            }
          }
        });
      </script>
    </div>
  `;
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏—Ç–æ–∫–∞
 */
function createContributionPieChart(data) {
  return `
    <div class="chart-container">
      <h3>ü•ß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ–¥–æ–≤–æ–≥–æ –ø—Ä–∏—Ç–æ–∫–∞</h3>
      <canvas id="contributionChart" width="300" height="300"></canvas>
      <script>
        const ctx = document.getElementById('contributionChart').getContext('2d');
        new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: ${JSON.stringify(data.labels)},
            datasets: [{
              data: ${JSON.stringify(data.values)},
              backgroundColor: [
                '#10b981', // –õ–∏—á–Ω—ã–µ –≤–∑–Ω–æ—Å—ã - –∑–µ–ª—ë–Ω—ã–π
                '#3b82f6', // –ì–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞ - —Å–∏–Ω–∏–π
                '#f59e0b'  // –ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç - –æ—Ä–∞–Ω–∂–µ–≤—ã–π
              ],
              borderWidth: 2,
              borderColor: '#ffffff'
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                position: 'bottom',
                labels: {
                  padding: 20,
                  usePointStyle: true
                }
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                    const percentage = ((context.parsed / total) * 100).toFixed(1);
                    return context.label + ': ' + 
                           context.parsed.toLocaleString('ru-RU') + ' ‚ÇΩ (' + percentage + '%)';
                  }
                }
              }
            }
          }
        });
      </script>
    </div>
  `;
}

/**
 * –°–æ–∑–¥–∞—ë—Ç —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
 */
function createScenariosChart(data) {
  return `
    <div class="chart-container">
      <h3>üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</h3>
      <canvas id="scenariosChart" width="400" height="250"></canvas>
      <script>
        const ctx = document.getElementById('scenariosChart').getContext('2d');
        new Chart(ctx, {
          type: 'bar',
          data: {
            labels: ${JSON.stringify(data.labels)},
            datasets: [{
              label: '–ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª',
              data: ${JSON.stringify(data.capital)},
              backgroundColor: '#3b82f6',
              borderColor: '#1d4ed8',
              borderWidth: 1
            }, {
              label: '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞',
              data: ${JSON.stringify(data.payout)},
              backgroundColor: '#10b981',
              borderColor: '#059669',
              borderWidth: 1,
              yAxisID: 'y1'
            }]
          },
          options: {
            responsive: true,
            scales: {
              y: {
                type: 'linear',
                display: true,
                position: 'left',
                title: {
                  display: true,
                  text: '–ö–∞–ø–∏—Ç–∞–ª (‚ÇΩ)'
                },
                ticks: {
                  callback: function(value) {
                    return value.toLocaleString('ru-RU') + ' ‚ÇΩ';
                  }
                }
              },
              y1: {
                type: 'linear',
                display: true,
                position: 'right',
                title: {
                  display: true,
                  text: '–í—ã–ø–ª–∞—Ç–∞ (‚ÇΩ/–º–µ—Å)'
                },
                grid: {
                  drawOnChartArea: false,
                },
                ticks: {
                  callback: function(value) {
                    return value.toLocaleString('ru-RU') + ' ‚ÇΩ';
                  }
                }
              }
            },
            plugins: {
              tooltip: {
                callbacks: {
                  label: function(context) {
                    return context.dataset.label + ': ' + 
                           context.parsed.y.toLocaleString('ru-RU') + ' ‚ÇΩ';
                  }
                }
              }
            }
          }
        });
      </script>
    </div>
  `;
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—ã–ø–ª–∞—Ç
 */
function createPayoutChart(data) {
  return `
    <div class="chart-container">
      <h3>üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç</h3>
      <canvas id="payoutChart" width="400" height="200"></canvas>
      <script>
        const ctx = document.getElementById('payoutChart').getContext('2d');
        new Chart(ctx, {
          type: 'line',
          data: {
            labels: ${JSON.stringify(data.months)},
            datasets: [{
              label: '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞',
              data: ${JSON.stringify(data.payouts)},
              borderColor: '#10b981',
              backgroundColor: 'rgba(16, 185, 129, 0.1)',
              borderWidth: 3,
              fill: true,
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    return '–í—ã–ø–ª–∞—Ç–∞: ' + context.parsed.y.toLocaleString('ru-RU') + ' ‚ÇΩ';
                  }
                }
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  callback: function(value) {
                    return value.toLocaleString('ru-RU') + ' ‚ÇΩ';
                  }
                }
              }
            }
          }
        });
      </script>
    </div>
  `;
}

/**
 * –°–æ–∑–¥–∞—ë—Ç HTML-—Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
 * @param {Object} tableData - –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
 * @returns {string} HTML —Ç–∞–±–ª–∏—Ü—ã
 */
export function createTableHtml(tableData) {
  if (!tableData || !tableData.headers || !tableData.rows) {
    return '';
  }

  let html = '<div class="table-container">';
  html += '<table class="data-table">';

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  html += '<thead><tr>';
  tableData.headers.forEach((header) => {
    html += `<th>${header}</th>`;
  });
  html += '</tr></thead>';

  // –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  html += '<tbody>';
  tableData.rows.forEach((row) => {
    html += '<tr>';
    row.forEach((cell) => {
      const isAmount = typeof cell === 'string' && cell.includes('‚ÇΩ');
      const cellClass = isAmount ? 'amount-cell' : '';
      html += `<td class="${cellClass}">${cell}</td>`;
    });
    html += '</tr>';
  });
  html += '</tbody>';

  html += '</table></div>';

  return html;
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
 * @param {number} current - –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 * @param {number} target - –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 * @param {string} label - –ü–æ–¥–ø–∏—Å—å
 * @returns {string} HTML –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
 */
export function createProgressBar(current, target, label) {
  const percentage = Math.min((current / target) * 100, 100);

  return `
    <div class="progress-container">
      <div class="progress-label">${label}</div>
      <div class="progress-bar">
        <div class="progress-fill" style="width: ${percentage}%"></div>
      </div>
      <div class="progress-text">
        ${current.toLocaleString('ru-RU')} ‚ÇΩ –∏–∑ ${target.toLocaleString('ru-RU')} ‚ÇΩ (${percentage.toFixed(1)}%)
      </div>
    </div>
  `;
}
