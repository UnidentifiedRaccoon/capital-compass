/**
 * –ü–∞—Ä—Å–µ—Ä markdown-–æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞ –≤ HTML –¥–ª—è PDF-–æ—Ç—á—ë—Ç–æ–≤
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤ Capital Compass AI
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
 */

import {
  extractDataForVisualization,
  createInputDataTable,
  createResultsTable,
  createContributionTable,
} from './dataExtractor.js';
import { createChartsHtml, createTableHtml, createProgressBar } from './chartGenerator.js';

/**
 * –≠–º–æ–¥–∑–∏-—Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
const EMOJI_MAP = {
  'üéØ': '–¶–µ–ª—å',
  'üì•': '–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
  'üìä': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã',
  'üéõÔ∏è': '–°—Ü–µ–Ω–∞—Ä–∏–∏',
  'üí°': '–ü–æ–¥—Å–∫–∞–∑–∫–∏',
  '‚ö†Ô∏è': '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è/—Ä–∏—Å–∫–∏',
  'üèõÔ∏è': '–ì–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
  'üí∏': '–ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç',
  'üí∞': '–õ–∏—á–Ω—ã–µ –≤–∑–Ω–æ—Å—ã',
  'üìà': '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å/—Ä–æ—Å—Ç',
  'üìâ': '–°–Ω–∏–∂–µ–Ω–∏–µ',
  'üîÅ': '–†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–µ—Ç–∞',
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª —ç–º–æ–¥–∑–∏ —Å–µ–∫—Ü–∏–∏
 * @param {string} char - –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} true –µ—Å–ª–∏ —ç—Ç–æ —ç–º–æ–¥–∑–∏ —Å–µ–∫—Ü–∏–∏
 */
function isSectionEmoji(char) {
  return Object.keys(EMOJI_MAP).includes(char);
}

/**
 * –ü–∞—Ä—Å–∏—Ç markdown-—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –≤ HTML
 * @param {string} markdownText - –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –≤ markdown-—Ñ–æ—Ä–º–∞—Ç–µ
 * @returns {string} HTML-–∫–æ–Ω—Ç–µ–Ω—Ç
 */
export function parseMarkdownToHtml(markdownText) {
  if (!markdownText || typeof markdownText !== 'string') {
    return '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>';
  }

  // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
  const lines = markdownText.split('\n').map((line) => line.trim());
  let html = '';
  let currentSection = null;
  let inList = false;

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (!line) {
      if (inList) {
        html += '</ul>';
        inList = false;
      }
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç–º–æ–¥–∑–∏)
    const sectionMatch = line.match(/^(\S)\s*\*\*(.*?)\*\*:\s*(.*)$/);
    if (sectionMatch && isSectionEmoji(sectionMatch[1])) {
      const [, emoji, title, content] = sectionMatch;
      const sectionTitle = EMOJI_MAP[emoji] || title;

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –±—ã–ª
      if (inList) {
        html += '</ul>';
        inList = false;
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ–∫—Ü–∏—é
      if (currentSection) {
        html += '</div>';
      }

      // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
      currentSection = emoji;
      html += `<div class="section">
        <div class="section-title">
          <span class="emoji">${emoji}</span>
          <span>${sectionTitle}</span>
        </div>
        <div class="section-content">`;

      if (content) {
        html += `<p>${escapeHtml(content)}</p>`;
      }
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏—è
    const sectionMatch2 = line.match(/^(\S)\s*\*\*(.*?)\*\*$/);
    if (sectionMatch2 && isSectionEmoji(sectionMatch2[1])) {
      const [, emoji, title] = sectionMatch2;
      const sectionTitle = EMOJI_MAP[emoji] || title;

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –±—ã–ª
      if (inList) {
        html += '</ul>';
        inList = false;
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ–∫—Ü–∏—é
      if (currentSection) {
        html += '</div>';
      }

      // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
      currentSection = emoji;
      html += `<div class="section">
        <div class="section-title">
          <span class="emoji">${emoji}</span>
          <span>${sectionTitle}</span>
        </div>
        <div class="section-content">`;
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ‚Ä¢ –∏–ª–∏ ‚Äî)
    const listItemMatch = line.match(/^[‚Ä¢‚Äî]\s*(.*)$/);
    if (listItemMatch) {
      const content = listItemMatch[1];

      if (!inList) {
        html += '<ul>';
        inList = true;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      if (currentSection === 'üìä') {
        html += formatResultItem(content);
      } else {
        html += `<li>${escapeHtml(content)}</li>`;
      }
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ‚Ä¢ –Ω–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ)
    const subheaderMatch = line.match(/^‚Ä¢\s*([^:]+):\s*(.*)$/);
    if (subheaderMatch) {
      const [, subheader, content] = subheaderMatch;

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –±—ã–ª
      if (inList) {
        html += '</ul>';
        inList = false;
      }

      html += `<div class="highlight-box">
        <div class="title">${escapeHtml(subheader)}</div>
        <div class="content">${escapeHtml(content)}</div>
      </div>`;
      continue;
    }

    // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    if (currentSection) {
      if (inList) {
        html += '</ul>';
        inList = false;
      }
      html += `<p>${escapeHtml(line)}</p>`;
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏, —Å–æ–∑–¥–∞—ë–º –æ–±—â–∏–π –±–ª–æ–∫
      if (inList) {
        html += '</ul>';
        inList = false;
      }
      html += `<div class="section">
        <div class="section-content">
          <p>${escapeHtml(line)}</p>
        </div>
      </div>`;
    }
  }

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∏ —Å–µ–∫—Ü–∏—é
  if (inList) {
    html += '</ul>';
  }
  if (currentSection) {
    html += '</div></div>';
  }

  return html;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —Å—É–º–º
 * @param {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
 * @returns {string} HTML-—ç–ª–µ–º–µ–Ω—Ç
 */
function formatResultItem(content) {
  // –ò—â–µ–º –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—É–º–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "123 456 ‚ÇΩ"
  const moneyRegex = /(\d+[\s\d]*)\s*‚ÇΩ/g;
  const formattedContent = content.replace(moneyRegex, '<span class="amount">$&</span>');

  return `<li>${formattedContent}</li>`;
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–∏–º–≤–æ–ª—ã
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function escapeHtml(text) {
  const map = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#039;',
  };

  return text.replace(/[&<>"']/g, (m) => map[m]);
}

/**
 * –°–æ–∑–¥–∞—ë—Ç HTML-–æ—Ç—á—ë—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
 * @param {string} botResponse - –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ markdown-—Ñ–æ—Ä–º–∞—Ç–µ
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @param {string} options.reportDate - –î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞
 * @returns {string} –ü–æ–ª–Ω—ã–π HTML-–æ—Ç—á—ë—Ç
 */
export function createReportHtml(botResponse, options = {}) {
  const reportDate =
    options.reportDate ||
    new Date().toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const visualizationData = extractDataForVisualization(botResponse);

  // –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
  const content = parseMarkdownToHtml(botResponse);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏
  const enhancedContent = addVisualizations(content, visualizationData);

  // –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
  const template = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á—ë—Ç –ø–æ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º - Capital Compass AI</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #1a1a1a;
            background: #ffffff;
            font-size: 14px;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 40px 30px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 30px;
            border-bottom: 3px solid #2563eb;
        }
        
        .logo {
            font-size: 28px;
            font-weight: 700;
            color: #2563eb;
            margin-bottom: 8px;
        }
        
        .subtitle {
            font-size: 16px;
            color: #6b7280;
            font-weight: 400;
        }
        
        .report-date {
            font-size: 12px;
            color: #9ca3af;
            margin-top: 10px;
        }
        
        .content {
            line-height: 1.8;
        }
        
        .section {
            margin-bottom: 30px;
        }
        
        .section-title {
            font-size: 18px;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .section-content {
            font-size: 14px;
            color: #374151;
        }
        
        .section-content ul {
            margin: 10px 0;
            padding-left: 20px;
        }
        
        .section-content li {
            margin-bottom: 8px;
        }
        
        .highlight-box {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }
        
        .highlight-box .title {
            font-weight: 600;
            color: #1e40af;
            margin-bottom: 10px;
            font-size: 16px;
        }
        
        .data-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 15px 0;
        }
        
        .data-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #f1f5f9;
        }
        
        .data-item:last-child {
            border-bottom: none;
        }
        
        .data-label {
            font-weight: 500;
            color: #4b5563;
        }
        
        .data-value {
            font-weight: 600;
            color: #1f2937;
        }
        
        .amount {
            color: #059669;
            font-weight: 600;
        }
        
        .warning {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            border-radius: 6px;
            padding: 15px;
            margin: 15px 0;
        }
        
        .warning .title {
            font-weight: 600;
            color: #92400e;
            margin-bottom: 5px;
        }
        
        .warning .content {
            color: #92400e;
            font-size: 13px;
        }
        
        .tip {
            background: #ecfdf5;
            border: 1px solid #10b981;
            border-radius: 6px;
            padding: 15px;
            margin: 15px 0;
        }
        
        .tip .title {
            font-weight: 600;
            color: #065f46;
            margin-bottom: 5px;
        }
        
        .tip .content {
            color: #065f46;
            font-size: 13px;
        }
        
        .scenario {
            background: #f1f5f9;
            border-radius: 6px;
            padding: 15px;
            margin: 10px 0;
        }
        
        .scenario-title {
            font-weight: 600;
            color: #1e40af;
            margin-bottom: 8px;
        }
        
        .emoji {
            font-size: 16px;
            margin-right: 6px;
        }
        
        .footer {
            margin-top: 50px;
            padding-top: 30px;
            border-top: 1px solid #e5e7eb;
            text-align: center;
            color: #6b7280;
            font-size: 12px;
        }
        
        .footer .disclaimer {
            margin-top: 10px;
            font-style: italic;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü */
        .table-container {
            margin: 20px 0;
            overflow-x: auto;
        }
        
        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        .data-table th {
            background: #f8fafc;
            color: #374151;
            font-weight: 600;
            padding: 12px 16px;
            text-align: left;
            border-bottom: 2px solid #e5e7eb;
        }
        
        .data-table td {
            padding: 12px 16px;
            border-bottom: 1px solid #f1f5f9;
        }
        
        .data-table tr:hover {
            background: #f8fafc;
        }
        
        .amount-cell {
            font-weight: 600;
            color: #059669;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ */
        .chart-container {
            margin: 30px 0;
            padding: 20px;
            background: #f8fafc;
            border-radius: 12px;
            border: 1px solid #e2e8f0;
        }
        
        .chart-container h3 {
            margin-bottom: 20px;
            color: #1f2937;
            font-size: 18px;
            font-weight: 600;
        }
        
        .chart-container canvas {
            max-width: 100%;
            height: auto;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ */
        .progress-container {
            margin: 20px 0;
        }
        
        .progress-label {
            font-weight: 600;
            color: #374151;
            margin-bottom: 8px;
        }
        
        .progress-bar {
            width: 100%;
            height: 12px;
            background: #e5e7eb;
            border-radius: 6px;
            overflow: hidden;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #10b981, #059669);
            transition: width 0.3s ease;
        }
        
        .progress-text {
            margin-top: 8px;
            font-size: 14px;
            color: #6b7280;
        }
        
        @media print {
            body {
                font-size: 12px;
            }
            
            .container {
                padding: 20px;
            }
            
            .header {
                margin-bottom: 30px;
            }
            
            .section {
                margin-bottom: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">üéØ Capital Compass AI</div>
            <div class="subtitle">–û—Ç—á—ë—Ç –ø–æ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º</div>
            <div class="report-date">${reportDate}</div>
        </div>
        
        <div class="content">
            ${enhancedContent}
        </div>
        
        <div class="footer">
            <div>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–º Capital Compass AI</div>
            <div class="disclaimer">
                –î–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. 
                –†–∞—Å—á—ë—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ 10% –≥–æ–¥–æ–≤—ã—Ö. 
                –†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.
            </div>
        </div>
    </div>
</body>
</html>`;

  return template;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ç–∞–±–ª–∏—Ü—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏) –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
 * @param {string} content - –û—Å–Ω–æ–≤–Ω–æ–π HTML-–∫–æ–Ω—Ç–µ–Ω—Ç
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
 * @returns {string} –ö–æ–Ω—Ç–µ–Ω—Ç —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
 */
function addVisualizations(content, data) {
  let enhancedContent = content;

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–µ–∫—Ü–∏–π
  if (data.inputData && Object.keys(data.inputData).length > 0) {
    const inputTable = createTableHtml(createInputDataTable(data.inputData));
    enhancedContent = enhancedContent.replace(
      /(<div class="section-title">.*?üì•.*?–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.*?<\/div>)/,
      `$1${inputTable}`
    );
  }

  if (data.results && Object.keys(data.results).length > 0) {
    const resultsTable = createTableHtml(createResultsTable(data.results));
    enhancedContent = enhancedContent.replace(
      /(<div class="section-title">.*?üìä.*?–†–µ–∑—É–ª—å—Ç–∞—Ç—ã.*?<\/div>)/,
      `$1${resultsTable}`
    );
  }

  if (data.contributionBreakdown && data.contributionBreakdown.personal > 0) {
    const contributionTable = createTableHtml(createContributionTable(data.contributionBreakdown));
    enhancedContent = enhancedContent.replace(
      /(<div class="section-title">.*?üìä.*?–†–µ–∑—É–ª—å—Ç–∞—Ç—ã.*?<\/div>.*?<\/div>)/,
      `$1${contributionTable}`
    );
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤ –∫–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const chartsHtml = createChartsHtml(data.charts);
  if (chartsHtml) {
    enhancedContent += `
      <div class="section">
        <div class="section-title">
          <span class="emoji">üìà</span>
          <span>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</span>
        </div>
        <div class="section-content">
          ${chartsHtml}
        </div>
      </div>
    `;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
  if (data.results.finalCapital && data.results.requiredContribution) {
    const targetCapital = data.results.finalCapital;
    const currentCapital = data.inputData.startCapital || 0;
    const progressBar = createProgressBar(
      currentCapital,
      targetCapital,
      '–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏'
    );

    enhancedContent = enhancedContent.replace(
      /(<div class="section-title">.*?üìä.*?–†–µ–∑—É–ª—å—Ç–∞—Ç—ã.*?<\/div>)/,
      `$1${progressBar}`
    );
  }

  return enhancedContent;
}
