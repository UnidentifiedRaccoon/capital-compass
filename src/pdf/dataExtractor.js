/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü
 */

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
 * @param {string} botResponse - –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ markdown-—Ñ–æ—Ä–º–∞—Ç–µ
 * @returns {Object} –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export function extractDataForVisualization(botResponse) {
  const data = {
    inputData: {},
    results: {},
    contributionBreakdown: {},
    scenarios: {},
    charts: {},
  };

  const lines = botResponse.split('\n').map((line) => line.trim());

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  data.inputData = extractInputData(lines);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  data.results = extractResults(lines);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–±–∏–≤–∫—É –ø—Ä–∏—Ç–æ–∫–∞
  data.contributionBreakdown = extractContributionBreakdown(lines);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
  data.scenarios = extractScenarios(lines);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  data.charts = generateChartData(data);

  return data;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function extractInputData(lines) {
  const inputData = {
    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    gender: '–Ω–µ —É–∫–∞–∑–∞–Ω',
    startCapital: 0,
    taxRate: 13,
    reinvestTaxDeduction: true,
  };

  for (const line of lines) {
    if (line.includes('–í–æ–∑—Ä–∞—Å—Ç:')) {
      inputData.age = extractNumber(line);
    } else if (line.includes('–ü–æ–ª:')) {
      inputData.gender = line.split('–ü–æ–ª:')[1]?.trim() || '–Ω–µ —É–∫–∞–∑–∞–Ω';
    } else if (line.includes('–î–æ—Ö–æ–¥:')) {
      inputData.income = extractAmount(line);
    } else if (line.includes('–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª:')) {
      inputData.startCapital = extractAmount(line);
    } else if (line.includes('–°—Ç–∞–≤–∫–∞ –ù–î–§–õ:')) {
      inputData.taxRate = extractNumber(line);
    } else if (line.includes('–†–µ–≥—É–ª—è—Ä–Ω—ã–π –≤–∑–Ω–æ—Å:')) {
      inputData.monthlyContribution = extractAmount(line);
    } else if (line.includes('–¶–µ–ª—å:')) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª—å - –ª–∏–±–æ –µ–∂–µ–º–µ—Å—è—á–Ω—É—é –≤—ã–ø–ª–∞—Ç—É, –ª–∏–±–æ –∫–∞–ø–∏—Ç–∞–ª
      if (line.includes('‚ÇΩ/–º–µ—Å')) {
        inputData.monthlyGoal = extractAmount(line);
      } else if (line.includes('‚ÇΩ')) {
        inputData.capitalGoal = extractAmount(line);
      }
    } else if (line.includes('–ù–∞—á–∞–ª–æ –≤—ã–ø–ª–∞—Ç:')) {
      inputData.payoutStart = line.split('–ù–∞—á–∞–ª–æ –≤—ã–ø–ª–∞—Ç:')[1]?.trim() || '–ø–æ –æ–±—â–µ–º—É –ø—Ä–∞–≤–∏–ª—É';
    } else if (
      line.includes('–†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å') ||
      line.includes('—Ä–µ–∏–Ω–≤–µ—Å—Ç') ||
      line.includes('–†–µ–∏–Ω–≤–µ—Å—Ç')
    ) {
      inputData.reinvestTaxDeduction = !line.includes('–Ω–µ—Ç') && !line.includes('–ù–µ—Ç');
    }
  }

  return inputData;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞
 */
function extractResults(lines) {
  const results = {};

  for (const line of lines) {
    if (line.includes('–¢—Ä–µ–±—É–µ–º—ã–π –≤–∑–Ω–æ—Å:')) {
      results.requiredContribution = extractAmount(line);
    } else if (line.includes('–ü—Ä–æ–≥–Ω–æ–∑ –∫–∞–ø–∏—Ç–∞–ª–∞ –∫ –Ω–∞—á–∞–ª—É –≤—ã–ø–ª–∞—Ç:')) {
      results.finalCapital = extractAmount(line);
    } else if (line.includes('–û—Ü–µ–Ω–∫–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã')) {
      results.monthlyPayout = extractAmount(line);
    }
  }

  return results;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–∑–±–∏–≤–∫—É –ø—Ä–∏—Ç–æ–∫–∞
 */
function extractContributionBreakdown(lines) {
  const breakdown = {
    personal: 0,
    government: 0,
    taxDeduction: 0,
  };

  for (const line of lines) {
    if (line.includes('üí∞ –õ–∏—á–Ω—ã–µ –≤–∑–Ω–æ—Å—ã:')) {
      breakdown.personal = extractAmount(line);
    } else if (line.includes('üèõÔ∏è –ì–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞:')) {
      breakdown.government = extractAmount(line);
    } else if (line.includes('üí∏ –ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç:')) {
      breakdown.taxDeduction = extractAmount(line);
    }
  }

  return breakdown;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏
 */
function extractScenarios(lines) {
  const scenarios = {
    withReinvestment: {},
    withoutReinvestment: {},
  };

  // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–µ
  const hasReinvestment = lines.some(
    (line) => line.includes('—Ä–µ–∏–Ω–≤–µ—Å—Ç') || line.includes('–†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å')
  );

  if (hasReinvestment) {
    scenarios.withReinvestment = {
      label: '–° —Ä–µ–∏–Ω–≤–µ—Å—Ç–æ–º –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ã—á–µ—Ç–∞',
      capital: 0, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      payout: 0,
    };
    scenarios.withoutReinvestment = {
      label: '–ë–µ–∑ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ã—á–µ—Ç–∞',
      capital: 0,
      payout: 0,
    };
  }

  return scenarios;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
 */
function generateChartData(data) {
  const charts = {};

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
  if (data.inputData.age && data.results.finalCapital) {
    charts.accumulationData = generateAccumulationData(data);
  }

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –ø—Ä–∏—Ç–æ–∫–∞
  if (data.contributionBreakdown.personal > 0) {
    charts.contributionBreakdown = {
      labels: ['–õ–∏—á–Ω—ã–µ –≤–∑–Ω–æ—Å—ã', '–ì–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç'],
      values: [
        data.contributionBreakdown.personal,
        data.contributionBreakdown.government,
        data.contributionBreakdown.taxDeduction,
      ],
    };
  }

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  if (data.scenarios.withReinvestment.label) {
    charts.scenariosComparison = {
      labels: [data.scenarios.withReinvestment.label, data.scenarios.withoutReinvestment.label],
      capital: [data.results.finalCapital, data.results.finalCapital * 0.85], // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∞
      payout: [data.results.monthlyPayout, data.results.monthlyPayout * 0.85],
    };
  }

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—ã–ø–ª–∞—Ç
  if (data.results.monthlyPayout) {
    charts.payoutForecast = generatePayoutForecast(data);
  }

  return charts;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–æ –≥–æ–¥–∞–º
 */
function generateAccumulationData(data) {
  const years = [];
  const values = [];
  const currentAge = data.inputData.age;
  const retirementAge = 60; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–µ–Ω—Å–∏—é
  const yearsToRetirement = retirementAge - currentAge;

  // –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
  let currentCapital = data.inputData.startCapital || 0;
  values.push(currentCapital);
  years.push(currentAge);

  // –ì–æ–¥–æ–≤–æ–π –≤–∑–Ω–æ—Å
  const annualContribution = data.results.requiredContribution * 12;
  const annualReturn = 0.1; // 10% –≥–æ–¥–æ–≤—ã—Ö

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–æ –≥–æ–¥–∞–º
  for (let year = 1; year <= yearsToRetirement; year++) {
    currentCapital = currentCapital * (1 + annualReturn) + annualContribution;
    values.push(Math.round(currentCapital));
    years.push(currentAge + year);
  }

  return { years, values };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—ã–ø–ª–∞—Ç
 */
function generatePayoutForecast(data) {
  const months = [];
  const payouts = [];
  const monthlyPayout = data.results.monthlyPayout;
  const payoutPeriod = 270; // 22.5 –≥–æ–¥–∞ –≤ –º–µ—Å—è—Ü–∞—Ö

  for (let month = 1; month <= Math.min(payoutPeriod, 60); month++) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ª–µ—Ç
    months.push(`–ú–µ—Å—è—Ü ${month}`);
    payouts.push(monthlyPayout);
  }

  return { months, payouts };
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
 */
function extractNumber(text) {
  const match = text.match(/(\d+)/);
  return match ? parseInt(match[1], 10) : 0;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ–Ω–µ–∂–Ω—É—é —Å—É–º–º—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
 */
function extractAmount(text) {
  // –ò—â–µ–º —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ —Å–∏–º–≤–æ–ª–æ–º ‚ÇΩ
  const match = text.match(/([\d\s]+)\s*‚ÇΩ/);
  if (match) {
    return parseInt(match[1].replace(/\s/g, ''), 10);
  }
  return 0;
}

/**
 * –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export function createInputDataTable(inputData) {
  const rows = [
    ['–í–æ–∑—Ä–∞—Å—Ç', `${inputData.age} –ª–µ—Ç`],
    ['–î–æ—Ö–æ–¥', `${inputData.income.toLocaleString('ru-RU')} ‚ÇΩ/–º–µ—Å`],
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  if (inputData.monthlyContribution) {
    rows.push([
      '–†–µ–≥—É–ª—è—Ä–Ω—ã–π –≤–∑–Ω–æ—Å',
      `${inputData.monthlyContribution.toLocaleString('ru-RU')} ‚ÇΩ/–º–µ—Å`,
    ]);
  }

  if (inputData.monthlyGoal) {
    rows.push(['–¶–µ–ª—å (–≤—ã–ø–ª–∞—Ç–∞)', `${inputData.monthlyGoal.toLocaleString('ru-RU')} ‚ÇΩ/–º–µ—Å`]);
  } else if (inputData.capitalGoal) {
    rows.push(['–¶–µ–ª—å (–∫–∞–ø–∏—Ç–∞–ª)', `${inputData.capitalGoal.toLocaleString('ru-RU')} ‚ÇΩ`]);
  }

  if (inputData.payoutStart && inputData.payoutStart !== '–ø–æ –æ–±—â–µ–º—É –ø—Ä–∞–≤–∏–ª—É') {
    rows.push(['–ù–∞—á–∞–ª–æ –≤—ã–ø–ª–∞—Ç', inputData.payoutStart]);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
  if (inputData.gender && inputData.gender !== '–Ω–µ —É–∫–∞–∑–∞–Ω') {
    rows.push(['–ü–æ–ª', inputData.gender]);
  }

  if (inputData.startCapital && inputData.startCapital > 0) {
    rows.push(['–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª', `${inputData.startCapital.toLocaleString('ru-RU')} ‚ÇΩ`]);
  }

  if (inputData.taxRate !== 13) {
    rows.push(['–°—Ç–∞–≤–∫–∞ –ù–î–§–õ', `${inputData.taxRate}%`]);
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  if (inputData.reinvestTaxDeduction !== true) {
    rows.push(['–†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–µ—Ç–∞', inputData.reinvestTaxDeduction ? '–î–∞' : '–ù–µ—Ç']);
  }

  return {
    headers: ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
    rows,
  };
}

/**
 * –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
export function createResultsTable(results) {
  return {
    headers: ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
    rows: [
      ['–¢—Ä–µ–±—É–µ–º—ã–π –≤–∑–Ω–æ—Å', `${results.requiredContribution.toLocaleString('ru-RU')} ‚ÇΩ/–º–µ—Å`],
      ['–ü—Ä–æ–≥–Ω–æ–∑ –∫–∞–ø–∏—Ç–∞–ª–∞', `${results.finalCapital.toLocaleString('ru-RU')} ‚ÇΩ`],
      ['–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞', `${results.monthlyPayout.toLocaleString('ru-RU')} ‚ÇΩ`],
    ],
  };
}

/**
 * –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É —Ä–∞–∑–±–∏–≤–∫–∏ –ø—Ä–∏—Ç–æ–∫–∞
 */
export function createContributionTable(breakdown) {
  const total = breakdown.personal + breakdown.government + breakdown.taxDeduction;

  return {
    headers: ['–ò—Å—Ç–æ—á–Ω–∏–∫', '–°—É–º–º–∞ –≤ –≥–æ–¥', '–î–æ–ª—è'],
    rows: [
      [
        '–õ–∏—á–Ω—ã–µ –≤–∑–Ω–æ—Å—ã',
        `${breakdown.personal.toLocaleString('ru-RU')} ‚ÇΩ`,
        `${((breakdown.personal / total) * 100).toFixed(1)}%`,
      ],
      [
        '–ì–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        `${breakdown.government.toLocaleString('ru-RU')} ‚ÇΩ`,
        `${((breakdown.government / total) * 100).toFixed(1)}%`,
      ],
      [
        '–ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç',
        `${breakdown.taxDeduction.toLocaleString('ru-RU')} ‚ÇΩ`,
        `${((breakdown.taxDeduction / total) * 100).toFixed(1)}%`,
      ],
      ['–ò—Ç–æ–≥–æ', `${total.toLocaleString('ru-RU')} ‚ÇΩ`, '100%'],
    ],
  };
}
